{"ast":null,"code":"/**\n * Berabundler Service - Manages swap bundling through the Berabundle contract\n * \n * This service handles:\n * - Getting swap quotes from OogaBooga API\n * - Bundling multiple token swaps into a single transaction\n * - Encoding transaction data for the Berabundle_SwapBundler contract\n */import{ethers}from'ethers';// Berabundle_SwapBundler contract ABI - only includes the executeBundle function we need\nconst BERABUNDLE_ABI=[{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"operationType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOutputAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Berabundle_SwapBundler.Operation[]\",\"name\":\"operations\",\"type\":\"tuple[]\"}],\"name\":\"executeBundle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}];// Operation types for the contract\nconst TYPE_APPROVE=1;const TYPE_SWAP=2;/**\n * Service for bundling multiple token swaps into a single Safe transaction\n */class BerabundlerService{constructor(){this.contractAddress=void 0;this.sdk=void 0;this.bundlerApis=void 0;this.apiKey=void 0;// Berabundle contract address on Berachain\nthis.contractAddress='0xF9b3593C58cd1A2e3D1Fc8ff44Da6421B5828c18';this.sdk=null;this.apiKey=null;// OogaBooga API endpoints by chain ID\nthis.bundlerApis={80085:'https://api.oogabooga.com/v1/swap'// Berachain testnet\n};}/**\n   * Initialize service with Safe SDK and API key\n   * @param sdk - Safe Apps SDK instance\n   * @param chainId - Chain ID (80085 for Berachain testnet)\n   * @param apiKey - OogaBooga API key\n   */initialize(sdk,chainId,apiKey){this.sdk=sdk;if(apiKey){this.apiKey=apiKey;}if(chainId!==80085){console.warn(`BerabundlerService: Chain ID ${chainId} is not fully supported yet`);}return Boolean(this.sdk);}/**\n   * Check if service is initialized\n   */isInitialized(){return Boolean(this.sdk);}/**\n   * Create swap operations from API responses\n   * @param swapTxs - Array of swap transaction data from API\n   * @returns Array of formatted swap operations\n   */createSwapOperations(swapTxs){return swapTxs.map(tx=>{const isNativeToken=tx.token.address==='native'||tx.token.symbol==='BERA'||tx.token.isNative;const swapParams=tx.swapParams||{};return{operationType:TYPE_SWAP,target:tx.to,// Router address from API\ndata:tx.data,// Calldata from API\nvalue:tx.value||\"0\",tokenAddress:isNativeToken?ethers.ZeroAddress:tx.token.address,tokenAmount:isNativeToken?\"0\":tx.token.amountIn||tx.amount||\"0\",outputToken:swapParams.outputToken||ethers.ZeroAddress,minOutputAmount:swapParams.minOutput||\"0\"};});}/**\n   * Prepare bundle transaction for Safe execution\n   * @param selectedTokens - Tokens and amounts to swap\n   * @param targetToken - Token to receive from swaps\n   * @param slippageTolerance - Slippage tolerance percentage (default 0.5%)\n   * @returns Transaction data and metadata\n   */async prepareBundleTransactions(selectedTokens,targetToken){let slippageTolerance=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0.5;if(!this.isInitialized()){return{success:false,error:\"BerabundlerService not initialized\"};}try{// Get swap quotes from OogaBooga API for each token\nconst swapRequests=await Promise.all(selectedTokens.map(async _ref=>{let{token,amount}=_ref;if(parseFloat(amount)<=0)return null;try{const apiResponse=await this.getSwapQuote(token,amount,targetToken);return{...apiResponse,token,amount};}catch(error){console.error(`Failed to get swap quote for ${token.symbol}:`,error);throw error;}}));// Filter out null results\nconst validSwapRequests=swapRequests.filter(req=>req!==null);if(validSwapRequests.length===0){return{success:false,error:\"No valid swaps to execute\"};}// Create operations array for the bundle contract\nconst operations=this.createSwapOperations(validSwapRequests);// Calculate total native token value and USD value\nlet totalValue=ethers.parseEther(\"0\");let totalValueUsd=0;let estimatedOutput=\"0\";operations.forEach(op=>{if(op.value&&op.value!==\"0\"){const opValue=ethers.parseUnits(op.value,18);totalValue=totalValue+opValue;}const token=selectedTokens.find(t=>t.token.address===op.tokenAddress||op.tokenAddress===ethers.ZeroAddress&&t.token.isNative);if(token&&token.token.priceUsd){totalValueUsd+=parseFloat(token.amount)*token.token.priceUsd;}});// Estimate output amount based on USD value\nif(targetToken.priceUsd&&totalValueUsd>0){const outputAmount=totalValueUsd/targetToken.priceUsd;estimatedOutput=outputAmount.toString();}// Encode calldata for the bundle contract\nconst berabundleInterface=new ethers.Interface(BERABUNDLE_ABI);const calldata=berabundleInterface.encodeFunctionData('executeBundle',[operations]);// Create transaction for Safe\nconst transaction={to:this.contractAddress,value:totalValue.toString(),data:calldata};return{success:true,txs:[transaction],totalValueUsd,estimatedOutput};}catch(error){console.error(\"Error preparing bundle transactions:\",error);return{success:false,error:error.message};}}/**\n   * Get swap quote from OogaBooga API\n   * @param inputToken - Token to swap from\n   * @param amount - Amount to swap (in token units)\n   * @param outputToken - Token to receive\n   * @returns Swap transaction data\n   */async getSwapQuote(inputToken,amount,outputToken){if(!this.apiKey){throw new Error('API key not set. Please set your OogaBooga API key.');}try{const chainId=80085;// Berachain testnet\nconst apiEndpoint=this.bundlerApis[chainId];if(!apiEndpoint){throw new Error(`No API endpoint for chain ID ${chainId}`);}const isNative=inputToken.isNative||inputToken.symbol==='BERA';const amountBN=ethers.parseUnits(amount,inputToken.decimals);// Call OogaBooga swap API\nconst response=await fetch(apiEndpoint,{method:'POST',headers:{'Content-Type':'application/json','Authorization':`Bearer ${this.apiKey}`},body:JSON.stringify({chainId,tokenIn:isNative?'native':inputToken.address,tokenOut:outputToken.address,amount:amountBN.toString(),slippage:0.5// 0.5% slippage\n})});if(!response.ok){const errorText=await response.text();throw new Error(`API request failed: ${response.status} ${errorText}`);}const data=await response.json();// Return formatted swap data\nreturn{to:data.routerAddress,data:data.calldata,value:isNative?amountBN.toString():\"0\",swapParams:{outputToken:outputToken.address,minOutput:data.minOutputAmount,router:data.routerAddress}};}catch(error){console.error('Error fetching swap quote:',error);throw error;}}}// Export singleton instance\nconst berabundlerService=new BerabundlerService();export default berabundlerService;","map":{"version":3,"names":["ethers","BERABUNDLE_ABI","TYPE_APPROVE","TYPE_SWAP","BerabundlerService","constructor","contractAddress","sdk","bundlerApis","apiKey","initialize","chainId","console","warn","Boolean","isInitialized","createSwapOperations","swapTxs","map","tx","isNativeToken","token","address","symbol","isNative","swapParams","operationType","target","to","data","value","tokenAddress","ZeroAddress","tokenAmount","amountIn","amount","outputToken","minOutputAmount","minOutput","prepareBundleTransactions","selectedTokens","targetToken","slippageTolerance","arguments","length","undefined","success","error","swapRequests","Promise","all","_ref","parseFloat","apiResponse","getSwapQuote","validSwapRequests","filter","req","operations","totalValue","parseEther","totalValueUsd","estimatedOutput","forEach","op","opValue","parseUnits","find","t","priceUsd","outputAmount","toString","berabundleInterface","Interface","calldata","encodeFunctionData","transaction","txs","message","inputToken","Error","apiEndpoint","amountBN","decimals","response","fetch","method","headers","body","JSON","stringify","tokenIn","tokenOut","slippage","ok","errorText","text","status","json","routerAddress","router","berabundlerService"],"sources":["/home/oliver/Projects/SafeSwap/src/services/BerabundlerService.ts"],"sourcesContent":["/**\n * Berabundler Service - Manages swap bundling through the Berabundle contract\n * \n * This service handles:\n * - Getting swap quotes from OogaBooga API\n * - Bundling multiple token swaps into a single transaction\n * - Encoding transaction data for the Berabundle_SwapBundler contract\n */\n\nimport { ethers } from 'ethers';\nimport { SwapOperation, Token, TokenAmount } from '../types';\n\n// Berabundle_SwapBundler contract ABI - only includes the executeBundle function we need\nconst BERABUNDLE_ABI = [\n  {\n    \"inputs\": [\n      {\n        \"components\": [\n          {\n            \"internalType\": \"uint8\",\n            \"name\": \"operationType\",\n            \"type\": \"uint8\"\n          },\n          {\n            \"internalType\": \"address\",\n            \"name\": \"target\",\n            \"type\": \"address\"\n          },\n          {\n            \"internalType\": \"bytes\",\n            \"name\": \"data\",\n            \"type\": \"bytes\"\n          },\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"value\",\n            \"type\": \"uint256\"\n          },\n          {\n            \"internalType\": \"address\",\n            \"name\": \"tokenAddress\",\n            \"type\": \"address\"\n          },\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"tokenAmount\",\n            \"type\": \"uint256\"\n          },\n          {\n            \"internalType\": \"address\",\n            \"name\": \"outputToken\",\n            \"type\": \"address\"\n          },\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"minOutputAmount\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"internalType\": \"struct Berabundle_SwapBundler.Operation[]\",\n        \"name\": \"operations\",\n        \"type\": \"tuple[]\"\n      }\n    ],\n    \"name\": \"executeBundle\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n  }\n];\n\n// Operation types for the contract\nconst TYPE_APPROVE = 1;\nconst TYPE_SWAP = 2;\n\n/**\n * Service for bundling multiple token swaps into a single Safe transaction\n */\nclass BerabundlerService {\n  private contractAddress: string;\n  private sdk: any | null;\n  private bundlerApis: Record<number, string>;\n  private apiKey: string | null;\n\n  constructor() {\n    // Berabundle contract address on Berachain\n    this.contractAddress = '0xF9b3593C58cd1A2e3D1Fc8ff44Da6421B5828c18';\n    this.sdk = null;\n    this.apiKey = null;\n    \n    // OogaBooga API endpoints by chain ID\n    this.bundlerApis = {\n      80085: 'https://api.oogabooga.com/v1/swap' // Berachain testnet\n    };\n  }\n\n  /**\n   * Initialize service with Safe SDK and API key\n   * @param sdk - Safe Apps SDK instance\n   * @param chainId - Chain ID (80085 for Berachain testnet)\n   * @param apiKey - OogaBooga API key\n   */\n  initialize(sdk: any, chainId: number, apiKey?: string): boolean {\n    this.sdk = sdk;\n    \n    if (apiKey) {\n      this.apiKey = apiKey;\n    }\n    \n    if (chainId !== 80085) {\n      console.warn(`BerabundlerService: Chain ID ${chainId} is not fully supported yet`);\n    }\n    \n    return Boolean(this.sdk);\n  }\n\n  /**\n   * Check if service is initialized\n   */\n  isInitialized(): boolean {\n    return Boolean(this.sdk);\n  }\n\n  /**\n   * Create swap operations from API responses\n   * @param swapTxs - Array of swap transaction data from API\n   * @returns Array of formatted swap operations\n   */\n  private createSwapOperations(swapTxs: any[]): SwapOperation[] {\n    return swapTxs.map(tx => {\n      const isNativeToken = tx.token.address === 'native' || tx.token.symbol === 'BERA' || tx.token.isNative;\n      const swapParams = tx.swapParams || {};\n      \n      return {\n        operationType: TYPE_SWAP,\n        target: tx.to, // Router address from API\n        data: tx.data, // Calldata from API\n        value: tx.value || \"0\",\n        tokenAddress: isNativeToken ? ethers.ZeroAddress : tx.token.address,\n        tokenAmount: isNativeToken ? \"0\" : tx.token.amountIn || tx.amount || \"0\",\n        outputToken: swapParams.outputToken || ethers.ZeroAddress,\n        minOutputAmount: swapParams.minOutput || \"0\"\n      };\n    });\n  }\n\n  /**\n   * Prepare bundle transaction for Safe execution\n   * @param selectedTokens - Tokens and amounts to swap\n   * @param targetToken - Token to receive from swaps\n   * @param slippageTolerance - Slippage tolerance percentage (default 0.5%)\n   * @returns Transaction data and metadata\n   */\n  async prepareBundleTransactions(\n    selectedTokens: TokenAmount[],\n    targetToken: Token,\n    slippageTolerance: number = 0.5\n  ): Promise<{\n    success: boolean;\n    txs?: any[];\n    error?: string;\n    totalValueUsd?: number;\n    estimatedOutput?: string;\n  }> {\n    if (!this.isInitialized()) {\n      return { success: false, error: \"BerabundlerService not initialized\" };\n    }\n\n    try {\n      // Get swap quotes from OogaBooga API for each token\n      const swapRequests = await Promise.all(\n        selectedTokens.map(async ({ token, amount }) => {\n          if (parseFloat(amount) <= 0) return null;\n          \n          try {\n            const apiResponse = await this.getSwapQuote(token, amount, targetToken);\n            return {\n              ...apiResponse,\n              token,\n              amount\n            };\n          } catch (error) {\n            console.error(`Failed to get swap quote for ${token.symbol}:`, error);\n            throw error;\n          }\n        })\n      );\n\n      // Filter out null results\n      const validSwapRequests = swapRequests.filter(req => req !== null) as any[];\n      \n      if (validSwapRequests.length === 0) {\n        return { success: false, error: \"No valid swaps to execute\" };\n      }\n\n      // Create operations array for the bundle contract\n      const operations = this.createSwapOperations(validSwapRequests);\n\n      // Calculate total native token value and USD value\n      let totalValue = ethers.parseEther(\"0\");\n      let totalValueUsd = 0;\n      let estimatedOutput = \"0\";\n      \n      operations.forEach(op => {\n        if (op.value && op.value !== \"0\") {\n          const opValue = ethers.parseUnits(op.value, 18);\n          totalValue = totalValue + opValue;\n        }\n        \n        const token = selectedTokens.find(t => \n          t.token.address === op.tokenAddress || \n          (op.tokenAddress === ethers.ZeroAddress && t.token.isNative)\n        );\n        \n        if (token && token.token.priceUsd) {\n          totalValueUsd += parseFloat(token.amount) * token.token.priceUsd;\n        }\n      });\n\n      // Estimate output amount based on USD value\n      if (targetToken.priceUsd && totalValueUsd > 0) {\n        const outputAmount = totalValueUsd / targetToken.priceUsd;\n        estimatedOutput = outputAmount.toString();\n      }\n\n      // Encode calldata for the bundle contract\n      const berabundleInterface = new ethers.Interface(BERABUNDLE_ABI);\n      const calldata = berabundleInterface.encodeFunctionData('executeBundle', [operations]);\n\n      // Create transaction for Safe\n      const transaction = {\n        to: this.contractAddress,\n        value: totalValue.toString(),\n        data: calldata\n      };\n\n      return {\n        success: true,\n        txs: [transaction],\n        totalValueUsd,\n        estimatedOutput\n      };\n    } catch (error: any) {\n      console.error(\"Error preparing bundle transactions:\", error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Get swap quote from OogaBooga API\n   * @param inputToken - Token to swap from\n   * @param amount - Amount to swap (in token units)\n   * @param outputToken - Token to receive\n   * @returns Swap transaction data\n   */\n  private async getSwapQuote(\n    inputToken: Token, \n    amount: string, \n    outputToken: Token\n  ): Promise<any> {\n    if (!this.apiKey) {\n      throw new Error('API key not set. Please set your OogaBooga API key.');\n    }\n\n    try {\n      const chainId = 80085; // Berachain testnet\n      const apiEndpoint = this.bundlerApis[chainId];\n      \n      if (!apiEndpoint) {\n        throw new Error(`No API endpoint for chain ID ${chainId}`);\n      }\n      \n      const isNative = inputToken.isNative || inputToken.symbol === 'BERA';\n      const amountBN = ethers.parseUnits(amount, inputToken.decimals);\n      \n      // Call OogaBooga swap API\n      const response = await fetch(apiEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiKey}`\n        },\n        body: JSON.stringify({\n          chainId,\n          tokenIn: isNative ? 'native' : inputToken.address,\n          tokenOut: outputToken.address,\n          amount: amountBN.toString(),\n          slippage: 0.5 // 0.5% slippage\n        })\n      });\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`API request failed: ${response.status} ${errorText}`);\n      }\n      \n      const data = await response.json();\n      \n      // Return formatted swap data\n      return {\n        to: data.routerAddress,\n        data: data.calldata,\n        value: isNative ? amountBN.toString() : \"0\",\n        swapParams: {\n          outputToken: outputToken.address,\n          minOutput: data.minOutputAmount,\n          router: data.routerAddress\n        }\n      };\n    } catch (error) {\n      console.error('Error fetching swap quote:', error);\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nconst berabundlerService = new BerabundlerService();\nexport default berabundlerService;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,OAASA,MAAM,KAAQ,QAAQ,CAG/B;AACA,KAAM,CAAAC,cAAc,CAAG,CACrB,CACE,QAAQ,CAAE,CACR,CACE,YAAY,CAAE,CACZ,CACE,cAAc,CAAE,OAAO,CACvB,MAAM,CAAE,eAAe,CACvB,MAAM,CAAE,OACV,CAAC,CACD,CACE,cAAc,CAAE,SAAS,CACzB,MAAM,CAAE,QAAQ,CAChB,MAAM,CAAE,SACV,CAAC,CACD,CACE,cAAc,CAAE,OAAO,CACvB,MAAM,CAAE,MAAM,CACd,MAAM,CAAE,OACV,CAAC,CACD,CACE,cAAc,CAAE,SAAS,CACzB,MAAM,CAAE,OAAO,CACf,MAAM,CAAE,SACV,CAAC,CACD,CACE,cAAc,CAAE,SAAS,CACzB,MAAM,CAAE,cAAc,CACtB,MAAM,CAAE,SACV,CAAC,CACD,CACE,cAAc,CAAE,SAAS,CACzB,MAAM,CAAE,aAAa,CACrB,MAAM,CAAE,SACV,CAAC,CACD,CACE,cAAc,CAAE,SAAS,CACzB,MAAM,CAAE,aAAa,CACrB,MAAM,CAAE,SACV,CAAC,CACD,CACE,cAAc,CAAE,SAAS,CACzB,MAAM,CAAE,iBAAiB,CACzB,MAAM,CAAE,SACV,CAAC,CACF,CACD,cAAc,CAAE,2CAA2C,CAC3D,MAAM,CAAE,YAAY,CACpB,MAAM,CAAE,SACV,CAAC,CACF,CACD,MAAM,CAAE,eAAe,CACvB,SAAS,CAAE,EAAE,CACb,iBAAiB,CAAE,SAAS,CAC5B,MAAM,CAAE,UACV,CAAC,CACF,CAED;AACA,KAAM,CAAAC,YAAY,CAAG,CAAC,CACtB,KAAM,CAAAC,SAAS,CAAG,CAAC,CAEnB;AACA;AACA,GACA,KAAM,CAAAC,kBAAmB,CAMvBC,WAAWA,CAAA,CAAG,MALNC,eAAe,aACfC,GAAG,aACHC,WAAW,aACXC,MAAM,QAGZ;AACA,IAAI,CAACH,eAAe,CAAG,4CAA4C,CACnE,IAAI,CAACC,GAAG,CAAG,IAAI,CACf,IAAI,CAACE,MAAM,CAAG,IAAI,CAElB;AACA,IAAI,CAACD,WAAW,CAAG,CACjB,KAAK,CAAE,mCAAoC;AAC7C,CAAC,CACH,CAEA;AACF;AACA;AACA;AACA;AACA,KACEE,UAAUA,CAACH,GAAQ,CAAEI,OAAe,CAAEF,MAAe,CAAW,CAC9D,IAAI,CAACF,GAAG,CAAGA,GAAG,CAEd,GAAIE,MAAM,CAAE,CACV,IAAI,CAACA,MAAM,CAAGA,MAAM,CACtB,CAEA,GAAIE,OAAO,GAAK,KAAK,CAAE,CACrBC,OAAO,CAACC,IAAI,CAAC,gCAAgCF,OAAO,6BAA6B,CAAC,CACpF,CAEA,MAAO,CAAAG,OAAO,CAAC,IAAI,CAACP,GAAG,CAAC,CAC1B,CAEA;AACF;AACA,KACEQ,aAAaA,CAAA,CAAY,CACvB,MAAO,CAAAD,OAAO,CAAC,IAAI,CAACP,GAAG,CAAC,CAC1B,CAEA;AACF;AACA;AACA;AACA,KACUS,oBAAoBA,CAACC,OAAc,CAAmB,CAC5D,MAAO,CAAAA,OAAO,CAACC,GAAG,CAACC,EAAE,EAAI,CACvB,KAAM,CAAAC,aAAa,CAAGD,EAAE,CAACE,KAAK,CAACC,OAAO,GAAK,QAAQ,EAAIH,EAAE,CAACE,KAAK,CAACE,MAAM,GAAK,MAAM,EAAIJ,EAAE,CAACE,KAAK,CAACG,QAAQ,CACtG,KAAM,CAAAC,UAAU,CAAGN,EAAE,CAACM,UAAU,EAAI,CAAC,CAAC,CAEtC,MAAO,CACLC,aAAa,CAAEvB,SAAS,CACxBwB,MAAM,CAAER,EAAE,CAACS,EAAE,CAAE;AACfC,IAAI,CAAEV,EAAE,CAACU,IAAI,CAAE;AACfC,KAAK,CAAEX,EAAE,CAACW,KAAK,EAAI,GAAG,CACtBC,YAAY,CAAEX,aAAa,CAAGpB,MAAM,CAACgC,WAAW,CAAGb,EAAE,CAACE,KAAK,CAACC,OAAO,CACnEW,WAAW,CAAEb,aAAa,CAAG,GAAG,CAAGD,EAAE,CAACE,KAAK,CAACa,QAAQ,EAAIf,EAAE,CAACgB,MAAM,EAAI,GAAG,CACxEC,WAAW,CAAEX,UAAU,CAACW,WAAW,EAAIpC,MAAM,CAACgC,WAAW,CACzDK,eAAe,CAAEZ,UAAU,CAACa,SAAS,EAAI,GAC3C,CAAC,CACH,CAAC,CAAC,CACJ,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACE,KAAM,CAAAC,yBAAyBA,CAC7BC,cAA6B,CAC7BC,WAAkB,CAQjB,IAPD,CAAAC,iBAAyB,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,GAAG,CAQ/B,GAAI,CAAC,IAAI,CAAC5B,aAAa,CAAC,CAAC,CAAE,CACzB,MAAO,CAAE+B,OAAO,CAAE,KAAK,CAAEC,KAAK,CAAE,oCAAqC,CAAC,CACxE,CAEA,GAAI,CACF;AACA,KAAM,CAAAC,YAAY,CAAG,KAAM,CAAAC,OAAO,CAACC,GAAG,CACpCV,cAAc,CAACtB,GAAG,CAAC,MAAAiC,IAAA,EAA6B,IAAtB,CAAE9B,KAAK,CAAEc,MAAO,CAAC,CAAAgB,IAAA,CACzC,GAAIC,UAAU,CAACjB,MAAM,CAAC,EAAI,CAAC,CAAE,MAAO,KAAI,CAExC,GAAI,CACF,KAAM,CAAAkB,WAAW,CAAG,KAAM,KAAI,CAACC,YAAY,CAACjC,KAAK,CAAEc,MAAM,CAAEM,WAAW,CAAC,CACvE,MAAO,CACL,GAAGY,WAAW,CACdhC,KAAK,CACLc,MACF,CAAC,CACH,CAAE,MAAOY,KAAK,CAAE,CACdnC,OAAO,CAACmC,KAAK,CAAC,gCAAgC1B,KAAK,CAACE,MAAM,GAAG,CAAEwB,KAAK,CAAC,CACrE,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CACH,CAAC,CAED;AACA,KAAM,CAAAQ,iBAAiB,CAAGP,YAAY,CAACQ,MAAM,CAACC,GAAG,EAAIA,GAAG,GAAK,IAAI,CAAU,CAE3E,GAAIF,iBAAiB,CAACX,MAAM,GAAK,CAAC,CAAE,CAClC,MAAO,CAAEE,OAAO,CAAE,KAAK,CAAEC,KAAK,CAAE,2BAA4B,CAAC,CAC/D,CAEA;AACA,KAAM,CAAAW,UAAU,CAAG,IAAI,CAAC1C,oBAAoB,CAACuC,iBAAiB,CAAC,CAE/D;AACA,GAAI,CAAAI,UAAU,CAAG3D,MAAM,CAAC4D,UAAU,CAAC,GAAG,CAAC,CACvC,GAAI,CAAAC,aAAa,CAAG,CAAC,CACrB,GAAI,CAAAC,eAAe,CAAG,GAAG,CAEzBJ,UAAU,CAACK,OAAO,CAACC,EAAE,EAAI,CACvB,GAAIA,EAAE,CAAClC,KAAK,EAAIkC,EAAE,CAAClC,KAAK,GAAK,GAAG,CAAE,CAChC,KAAM,CAAAmC,OAAO,CAAGjE,MAAM,CAACkE,UAAU,CAACF,EAAE,CAAClC,KAAK,CAAE,EAAE,CAAC,CAC/C6B,UAAU,CAAGA,UAAU,CAAGM,OAAO,CACnC,CAEA,KAAM,CAAA5C,KAAK,CAAGmB,cAAc,CAAC2B,IAAI,CAACC,CAAC,EACjCA,CAAC,CAAC/C,KAAK,CAACC,OAAO,GAAK0C,EAAE,CAACjC,YAAY,EAClCiC,EAAE,CAACjC,YAAY,GAAK/B,MAAM,CAACgC,WAAW,EAAIoC,CAAC,CAAC/C,KAAK,CAACG,QACrD,CAAC,CAED,GAAIH,KAAK,EAAIA,KAAK,CAACA,KAAK,CAACgD,QAAQ,CAAE,CACjCR,aAAa,EAAIT,UAAU,CAAC/B,KAAK,CAACc,MAAM,CAAC,CAAGd,KAAK,CAACA,KAAK,CAACgD,QAAQ,CAClE,CACF,CAAC,CAAC,CAEF;AACA,GAAI5B,WAAW,CAAC4B,QAAQ,EAAIR,aAAa,CAAG,CAAC,CAAE,CAC7C,KAAM,CAAAS,YAAY,CAAGT,aAAa,CAAGpB,WAAW,CAAC4B,QAAQ,CACzDP,eAAe,CAAGQ,YAAY,CAACC,QAAQ,CAAC,CAAC,CAC3C,CAEA;AACA,KAAM,CAAAC,mBAAmB,CAAG,GAAI,CAAAxE,MAAM,CAACyE,SAAS,CAACxE,cAAc,CAAC,CAChE,KAAM,CAAAyE,QAAQ,CAAGF,mBAAmB,CAACG,kBAAkB,CAAC,eAAe,CAAE,CAACjB,UAAU,CAAC,CAAC,CAEtF;AACA,KAAM,CAAAkB,WAAW,CAAG,CAClBhD,EAAE,CAAE,IAAI,CAACtB,eAAe,CACxBwB,KAAK,CAAE6B,UAAU,CAACY,QAAQ,CAAC,CAAC,CAC5B1C,IAAI,CAAE6C,QACR,CAAC,CAED,MAAO,CACL5B,OAAO,CAAE,IAAI,CACb+B,GAAG,CAAE,CAACD,WAAW,CAAC,CAClBf,aAAa,CACbC,eACF,CAAC,CACH,CAAE,MAAOf,KAAU,CAAE,CACnBnC,OAAO,CAACmC,KAAK,CAAC,sCAAsC,CAAEA,KAAK,CAAC,CAC5D,MAAO,CACLD,OAAO,CAAE,KAAK,CACdC,KAAK,CAAEA,KAAK,CAAC+B,OACf,CAAC,CACH,CACF,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACE,KAAc,CAAAxB,YAAYA,CACxByB,UAAiB,CACjB5C,MAAc,CACdC,WAAkB,CACJ,CACd,GAAI,CAAC,IAAI,CAAC3B,MAAM,CAAE,CAChB,KAAM,IAAI,CAAAuE,KAAK,CAAC,qDAAqD,CAAC,CACxE,CAEA,GAAI,CACF,KAAM,CAAArE,OAAO,CAAG,KAAK,CAAE;AACvB,KAAM,CAAAsE,WAAW,CAAG,IAAI,CAACzE,WAAW,CAACG,OAAO,CAAC,CAE7C,GAAI,CAACsE,WAAW,CAAE,CAChB,KAAM,IAAI,CAAAD,KAAK,CAAC,gCAAgCrE,OAAO,EAAE,CAAC,CAC5D,CAEA,KAAM,CAAAa,QAAQ,CAAGuD,UAAU,CAACvD,QAAQ,EAAIuD,UAAU,CAACxD,MAAM,GAAK,MAAM,CACpE,KAAM,CAAA2D,QAAQ,CAAGlF,MAAM,CAACkE,UAAU,CAAC/B,MAAM,CAAE4C,UAAU,CAACI,QAAQ,CAAC,CAE/D;AACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACJ,WAAW,CAAE,CACxCK,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,eAAe,CAAE,UAAU,IAAI,CAAC9E,MAAM,EACxC,CAAC,CACD+E,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnB/E,OAAO,CACPgF,OAAO,CAAEnE,QAAQ,CAAG,QAAQ,CAAGuD,UAAU,CAACzD,OAAO,CACjDsE,QAAQ,CAAExD,WAAW,CAACd,OAAO,CAC7Ba,MAAM,CAAE+C,QAAQ,CAACX,QAAQ,CAAC,CAAC,CAC3BsB,QAAQ,CAAE,GAAI;AAChB,CAAC,CACH,CAAC,CAAC,CAEF,GAAI,CAACT,QAAQ,CAACU,EAAE,CAAE,CAChB,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAX,QAAQ,CAACY,IAAI,CAAC,CAAC,CACvC,KAAM,IAAI,CAAAhB,KAAK,CAAC,uBAAuBI,QAAQ,CAACa,MAAM,IAAIF,SAAS,EAAE,CAAC,CACxE,CAEA,KAAM,CAAAlE,IAAI,CAAG,KAAM,CAAAuD,QAAQ,CAACc,IAAI,CAAC,CAAC,CAElC;AACA,MAAO,CACLtE,EAAE,CAAEC,IAAI,CAACsE,aAAa,CACtBtE,IAAI,CAAEA,IAAI,CAAC6C,QAAQ,CACnB5C,KAAK,CAAEN,QAAQ,CAAG0D,QAAQ,CAACX,QAAQ,CAAC,CAAC,CAAG,GAAG,CAC3C9C,UAAU,CAAE,CACVW,WAAW,CAAEA,WAAW,CAACd,OAAO,CAChCgB,SAAS,CAAET,IAAI,CAACQ,eAAe,CAC/B+D,MAAM,CAAEvE,IAAI,CAACsE,aACf,CACF,CAAC,CACH,CAAE,MAAOpD,KAAK,CAAE,CACdnC,OAAO,CAACmC,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAAC,CAClD,KAAM,CAAAA,KAAK,CACb,CACF,CACF,CAEA;AACA,KAAM,CAAAsD,kBAAkB,CAAG,GAAI,CAAAjG,kBAAkB,CAAC,CAAC,CACnD,cAAe,CAAAiG,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}