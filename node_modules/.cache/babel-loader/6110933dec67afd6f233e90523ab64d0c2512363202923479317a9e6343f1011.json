{"ast":null,"code":"/**\n * Token Service - Handles token data fetching from OogaBooga API\n * \n * This service manages:\n * - Fetching available tokens from OogaBooga API\n * - Querying on-chain token balances\n * - Fetching current token prices in USD\n */import{ethers}from'ethers';const erc20Abi=['function balanceOf(address owner) view returns (uint256)','function decimals() view returns (uint8)','function symbol() view returns (string)','function name() view returns (string)'];/**\n * Fetches list of available tokens from OogaBooga API\n * @param apiKey - OogaBooga API key for authentication\n * @returns Promise containing array of Token objects\n */export const fetchTokenList=async function(){let apiKey=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;try{if(!apiKey){throw new Error('API key required for token list');}const response=await fetch('https://api.oogabooga.com/v1/tokens',{method:'GET',headers:{'Content-Type':'application/json','Authorization':`Bearer ${apiKey}`}});if(!response.ok){throw new Error(`API error: ${response.status} ${await response.text()}`);}const data=await response.json();// Transform API response to Token format\nconst tokens=data.map(token=>({name:token.name,symbol:token.symbol,address:token.address,decimals:token.decimals,chainId:80085,// Berachain testnet\nlogoURI:token.tokenURI||'',isNative:token.address==='0x0000000000000000000000000000000000000000'}));// Ensure native BERA token is included\nif(!tokens.find(t=>t.isNative)){tokens.unshift({name:'Bera',symbol:'BERA',address:'0x0000000000000000000000000000000000000000',decimals:18,chainId:80085,logoURI:'',isNative:true});}return{tokens};}catch(error){console.error('Error fetching token list:',error);throw new Error('Failed to fetch token list');}};/**\n * Queries on-chain balances for given tokens\n * @param tokens - Array of tokens to check balances for\n * @param safeAddress - Address of the Safe to check balances for\n * @param provider - Ethers provider for blockchain queries\n * @returns Promise containing tokens with balance property added\n */export const fetchTokenBalances=async(tokens,safeAddress,provider)=>{try{const tokensWithBalances=await Promise.all(tokens.map(async token=>{try{let balance='0';if(token.isNative){// Query native BERA balance\nbalance=ethers.formatEther(await provider.getBalance(safeAddress));}else{// Query ERC20 token balance\nconst tokenContract=new ethers.Contract(token.address,erc20Abi,provider);const rawBalance=await tokenContract.balanceOf(safeAddress);balance=ethers.formatUnits(rawBalance,token.decimals);}return{...token,balance};}catch(error){console.error(`Error fetching balance for token ${token.symbol}:`,error);return{...token,balance:'0'};}}));return tokensWithBalances;}catch(error){console.error('Error fetching token balances:',error);throw new Error('Failed to fetch token balances');}};/**\n * Fetches current USD prices for tokens from OogaBooga API\n * @param tokens - Array of tokens to fetch prices for\n * @param apiKey - OogaBooga API key for authentication\n * @returns Promise containing tokens with priceUsd property added\n */export const fetchTokenPrices=async function(tokens){let apiKey=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;try{if(!apiKey){// Return tokens without prices if no API key\nreturn tokens;}const response=await fetch('https://api.oogabooga.com/v1/prices',{method:'GET',headers:{'Content-Type':'application/json','Authorization':`Bearer ${apiKey}`}});if(!response.ok){throw new Error(`API error: ${response.status} ${await response.text()}`);}const priceData=await response.json();// Map prices to tokens\nconst priceMap=new Map();priceData.forEach(item=>{priceMap.set(item.address.toLowerCase(),item.price);});const tokensWithPrices=tokens.map(token=>{const address=token.isNative?'0x0000000000000000000000000000000000000000':token.address.toLowerCase();return{...token,priceUsd:priceMap.get(address)||0};});return tokensWithPrices;}catch(error){console.error('Error fetching token prices:',error);// Return tokens without prices on error\nreturn tokens;}};","map":{"version":3,"names":["ethers","erc20Abi","fetchTokenList","apiKey","arguments","length","undefined","Error","response","fetch","method","headers","ok","status","text","data","json","tokens","map","token","name","symbol","address","decimals","chainId","logoURI","tokenURI","isNative","find","t","unshift","error","console","fetchTokenBalances","safeAddress","provider","tokensWithBalances","Promise","all","balance","formatEther","getBalance","tokenContract","Contract","rawBalance","balanceOf","formatUnits","fetchTokenPrices","priceData","priceMap","Map","forEach","item","set","toLowerCase","price","tokensWithPrices","priceUsd","get"],"sources":["/home/oliver/Projects/SafeSwap/src/services/tokenService.ts"],"sourcesContent":["/**\n * Token Service - Handles token data fetching from OogaBooga API\n * \n * This service manages:\n * - Fetching available tokens from OogaBooga API\n * - Querying on-chain token balances\n * - Fetching current token prices in USD\n */\n\nimport { ethers } from 'ethers';\nimport { Token } from '../types';\n\nconst erc20Abi = [\n  'function balanceOf(address owner) view returns (uint256)',\n  'function decimals() view returns (uint8)',\n  'function symbol() view returns (string)',\n  'function name() view returns (string)'\n];\n\n/**\n * Fetches list of available tokens from OogaBooga API\n * @param apiKey - OogaBooga API key for authentication\n * @returns Promise containing array of Token objects\n */\nexport const fetchTokenList = async (apiKey: string | null = null): Promise<{ tokens: Token[] }> => {\n  try {\n    if (!apiKey) {\n      throw new Error('API key required for token list');\n    }\n    \n    const response = await fetch('https://api.oogabooga.com/v1/tokens', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error(`API error: ${response.status} ${await response.text()}`);\n    }\n    \n    const data = await response.json();\n    \n    // Transform API response to Token format\n    const tokens: Token[] = data.map((token: any) => ({\n      name: token.name,\n      symbol: token.symbol,\n      address: token.address,\n      decimals: token.decimals,\n      chainId: 80085, // Berachain testnet\n      logoURI: token.tokenURI || '',\n      isNative: token.address === '0x0000000000000000000000000000000000000000'\n    }));\n    \n    // Ensure native BERA token is included\n    if (!tokens.find(t => t.isNative)) {\n      tokens.unshift({\n        name: 'Bera',\n        symbol: 'BERA',\n        address: '0x0000000000000000000000000000000000000000',\n        decimals: 18,\n        chainId: 80085,\n        logoURI: '',\n        isNative: true\n      });\n    }\n\n    return { tokens };\n  } catch (error) {\n    console.error('Error fetching token list:', error);\n    throw new Error('Failed to fetch token list');\n  }\n};\n\n/**\n * Queries on-chain balances for given tokens\n * @param tokens - Array of tokens to check balances for\n * @param safeAddress - Address of the Safe to check balances for\n * @param provider - Ethers provider for blockchain queries\n * @returns Promise containing tokens with balance property added\n */\nexport const fetchTokenBalances = async (\n  tokens: Token[],\n  safeAddress: string,\n  provider: ethers.Provider\n): Promise<Token[]> => {\n  try {\n    const tokensWithBalances = await Promise.all(\n      tokens.map(async (token) => {\n        try {\n          let balance = '0';\n\n          if (token.isNative) {\n            // Query native BERA balance\n            balance = ethers.formatEther(await provider.getBalance(safeAddress));\n          } else {\n            // Query ERC20 token balance\n            const tokenContract = new ethers.Contract(token.address, erc20Abi, provider);\n            const rawBalance = await tokenContract.balanceOf(safeAddress);\n            balance = ethers.formatUnits(rawBalance, token.decimals);\n          }\n\n          return {\n            ...token,\n            balance\n          };\n        } catch (error) {\n          console.error(`Error fetching balance for token ${token.symbol}:`, error);\n          return {\n            ...token,\n            balance: '0'\n          };\n        }\n      })\n    );\n\n    return tokensWithBalances;\n  } catch (error) {\n    console.error('Error fetching token balances:', error);\n    throw new Error('Failed to fetch token balances');\n  }\n};\n\n/**\n * Fetches current USD prices for tokens from OogaBooga API\n * @param tokens - Array of tokens to fetch prices for\n * @param apiKey - OogaBooga API key for authentication\n * @returns Promise containing tokens with priceUsd property added\n */\nexport const fetchTokenPrices = async (\n  tokens: Token[],\n  apiKey: string | null = null\n): Promise<Token[]> => {\n  try {\n    if (!apiKey) {\n      // Return tokens without prices if no API key\n      return tokens;\n    }\n    \n    const response = await fetch('https://api.oogabooga.com/v1/prices', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error(`API error: ${response.status} ${await response.text()}`);\n    }\n    \n    const priceData = await response.json();\n    \n    // Map prices to tokens\n    const priceMap = new Map<string, number>();\n    priceData.forEach((item: { address: string; price: number }) => {\n      priceMap.set(item.address.toLowerCase(), item.price);\n    });\n    \n    const tokensWithPrices = tokens.map(token => {\n      const address = token.isNative ? '0x0000000000000000000000000000000000000000' : token.address.toLowerCase();\n      return {\n        ...token,\n        priceUsd: priceMap.get(address) || 0\n      };\n    });\n\n    return tokensWithPrices;\n  } catch (error) {\n    console.error('Error fetching token prices:', error);\n    // Return tokens without prices on error\n    return tokens;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}