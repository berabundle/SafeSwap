{"ast":null,"code":"import{ethers}from'ethers';// ABI for the Berabundle_SwapBundler contract\nconst BERABUNDLE_ABI=[{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"operationType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOutputAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Berabundle_SwapBundler.Operation[]\",\"name\":\"operations\",\"type\":\"tuple[]\"}],\"name\":\"executeBundle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}];// Operation types\nconst TYPE_APPROVE=1;const TYPE_SWAP=2;// ERC20 Interface for approvals\nconst ERC20_ABI=['function approve(address spender, uint256 amount) returns (bool)'];/**\n * Service for interacting with the Berabundle_SwapBundler contract via Safe\n */class BerabundlerService{constructor(){this.contractAddress=void 0;this.sdk=void 0;this.bundlerApis=void 0;this.apiKey=void 0;this.contractAddress='0xF9b3593C58cd1A2e3D1Fc8ff44Da6421B5828c18';this.sdk=null;this.apiKey=null;this.bundlerApis={80085:'https://api.oogabooga.com/v1/swap'};}initialize(sdk,chainId,apiKey){this.sdk=sdk;// Set API key if provided\nif(apiKey){this.apiKey=apiKey;}// Potentially switch contract address based on chain\nif(chainId!==80085){console.warn(`BerabundlerService: Chain ID ${chainId} is not fully supported yet`);}return Boolean(this.sdk);}/**\n   * Set the API key\n   */setApiKey(apiKey){this.apiKey=apiKey;}/**\n   * Check if the service is initialized\n   */isInitialized(){return Boolean(this.sdk);}/**\n   * Create operations for token approvals\n   */createApprovalOperations(approvalTxs){return approvalTxs.map(tx=>{if(!tx.to||!tx.token||!tx.token.address){console.error(\"Invalid approval transaction:\",tx);return null;}return{operationType:TYPE_APPROVE,target:tx.to,// The router/spender address\ndata:\"0x\",// We don't need data for approvals as the contract handles it\nvalue:\"0\",tokenAddress:tx.token.address,// The token contract address\ntokenAmount:ethers.MaxUint256.toString(),// Max approval\noutputToken:ethers.ZeroAddress,// Not used for approvals\nminOutputAmount:\"0\"// Not used for approvals\n};}).filter(op=>op!==null);}/**\n   * Create operations for token swaps\n   */createSwapOperations(swapTxs){return swapTxs.map(tx=>{// Check if this is a native token or ERC20 token swap\nconst isNativeToken=tx.token.address==='native'||tx.token.symbol==='BERA'||tx.token.isNative;// Extract swapParams for the swap\nconst swapParams=tx.swapParams||{};// Use API's transaction data directly\nreturn{operationType:TYPE_SWAP,target:tx.to,// Router address from API\ndata:tx.data,// Use exact data from API response\nvalue:tx.value||\"0\",tokenAddress:isNativeToken?ethers.ZeroAddress:tx.token.address,tokenAmount:isNativeToken?\"0\":tx.token.amountIn||tx.amount||\"0\",outputToken:swapParams.outputToken||ethers.ZeroAddress,minOutputAmount:swapParams.minOutput||\"0\"};});}/**\n   * Create direct approval transactions for the Safe\n   */async createApprovalTransactions(tokenAmount,routerAddress){if(!this.isInitialized())throw new Error(\"BerabundlerService not initialized\");const{token,amount}=tokenAmount;// Skip native token (no approval needed)\nif(token.isNative||token.address==='native'||token.symbol==='BERA'){return[];}// Create approval transaction\nconst erc20Interface=new ethers.Interface(ERC20_ABI);const data=erc20Interface.encodeFunctionData('approve',[routerAddress,ethers.parseUnits(amount,token.decimals)]);return[{to:token.address,value:\"0\",data}];}/**\n   * Prepare swap transactions for the berabundle contract via Safe\n   */async prepareBundleTransactions(selectedTokens,targetToken){let slippageTolerance=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0.5;if(!this.isInitialized()){return{success:false,error:\"BerabundlerService not initialized\"};}try{// 1. Prepare API requests for each token swap\nconst swapRequests=await Promise.all(selectedTokens.map(async _ref=>{let{token,amount}=_ref;// Skip tokens with zero amount\nif(parseFloat(amount)<=0)return null;try{// Get real swap quote from OogaBooga API\nconst apiResponse=await this.getSwapQuote(token,amount,targetToken);return{...apiResponse,token,amount};}catch(error){console.error(`Failed to get swap quote for ${token.symbol}:`,error);throw error;}}));// Filter out null results\nconst validSwapRequests=swapRequests.filter(req=>req!==null);if(validSwapRequests.length===0){return{success:false,error:\"No valid swaps to execute\"};}// 2. Create operations for the bundle\nconst operations=[...this.createSwapOperations(validSwapRequests)];// 3. Calculate total value for native token transfers\nlet totalValue=ethers.parseEther(\"0\");let totalValueUsd=0;let estimatedOutput=ethers.parseEther(\"0\");operations.forEach(op=>{if(op.value&&op.value!==\"0\"){const opValue=ethers.parseUnits(op.value,18);totalValue=totalValue+opValue;}// Track USD value and estimated output for UI\nconst token=selectedTokens.find(t=>t.token.address===op.tokenAddress||op.tokenAddress===ethers.ZeroAddress&&t.token.isNative);if(token&&token.token.priceUsd){totalValueUsd+=parseFloat(token.amount)*token.token.priceUsd;}});// Estimate output in target token\nif(targetToken.priceUsd&&totalValueUsd>0){const outputAmount=totalValueUsd/targetToken.priceUsd;estimatedOutput=outputAmount.toString();}// 4. Encode calldata for the berabundle contract\nconst berabundleInterface=new ethers.Interface(BERABUNDLE_ABI);const calldata=berabundleInterface.encodeFunctionData('executeBundle',[operations]);// 5. Create transaction for the Safe\nconst transaction={to:this.contractAddress,value:totalValue.toString(),data:calldata};return{success:true,txs:[transaction],totalValueUsd,estimatedOutput:estimatedOutput.toString()};}catch(error){console.error(\"Error preparing bundle transactions:\",error);return{success:false,error:error.message};}}/**\n   * Get a swap quote from the OogaBooga API\n   */async getSwapQuote(inputToken,amount,outputToken){if(!this.apiKey){throw new Error('API key not set. Please set your OogaBooga API key.');}try{// Prepare API request\nconst chainId=80085;// Berachain testnet\nconst apiEndpoint=this.bundlerApis[chainId];if(!apiEndpoint){throw new Error(`No API endpoint for chain ID ${chainId}`);}const isNative=inputToken.isNative||inputToken.symbol==='BERA';const amountBN=ethers.parseUnits(amount,inputToken.decimals);// Make the API request\nconst response=await fetch(apiEndpoint,{method:'POST',headers:{'Content-Type':'application/json','Authorization':`Bearer ${this.apiKey}`},body:JSON.stringify({chainId,tokenIn:isNative?'native':inputToken.address,tokenOut:outputToken.address,amount:amountBN.toString(),slippage:0.5// 0.5% slippage\n})});if(!response.ok){const errorText=await response.text();throw new Error(`API request failed: ${response.status} ${errorText}`);}const data=await response.json();return{to:data.routerAddress,data:data.calldata,value:isNative?amountBN.toString():\"0\",swapParams:{outputToken:outputToken.address,minOutput:data.minOutputAmount,router:data.routerAddress}};}catch(error){console.error('Error fetching swap quote:',error);throw error;}}}// Export singleton instance\nconst berabundlerService=new BerabundlerService();export default berabundlerService;","map":{"version":3,"names":["ethers","BERABUNDLE_ABI","TYPE_APPROVE","TYPE_SWAP","ERC20_ABI","BerabundlerService","constructor","contractAddress","sdk","bundlerApis","apiKey","initialize","chainId","console","warn","Boolean","setApiKey","isInitialized","createApprovalOperations","approvalTxs","map","tx","to","token","address","error","operationType","target","data","value","tokenAddress","tokenAmount","MaxUint256","toString","outputToken","ZeroAddress","minOutputAmount","filter","op","createSwapOperations","swapTxs","isNativeToken","symbol","isNative","swapParams","amountIn","amount","minOutput","createApprovalTransactions","routerAddress","Error","erc20Interface","Interface","encodeFunctionData","parseUnits","decimals","prepareBundleTransactions","selectedTokens","targetToken","slippageTolerance","arguments","length","undefined","success","swapRequests","Promise","all","_ref","parseFloat","apiResponse","getSwapQuote","validSwapRequests","req","operations","totalValue","parseEther","totalValueUsd","estimatedOutput","forEach","opValue","find","t","priceUsd","outputAmount","berabundleInterface","calldata","transaction","txs","message","inputToken","apiEndpoint","amountBN","response","fetch","method","headers","body","JSON","stringify","tokenIn","tokenOut","slippage","ok","errorText","text","status","json","router","berabundlerService"],"sources":["/home/oliver/Projects/SafeSwap/src/services/BerabundlerService.ts"],"sourcesContent":["import { ethers } from 'ethers';\nimport { SwapOperation, Token, TokenAmount } from '../types';\n\n// ABI for the Berabundle_SwapBundler contract\nconst BERABUNDLE_ABI = [\n  {\n    \"inputs\": [\n      {\n        \"components\": [\n          {\n            \"internalType\": \"uint8\",\n            \"name\": \"operationType\",\n            \"type\": \"uint8\"\n          },\n          {\n            \"internalType\": \"address\",\n            \"name\": \"target\",\n            \"type\": \"address\"\n          },\n          {\n            \"internalType\": \"bytes\",\n            \"name\": \"data\",\n            \"type\": \"bytes\"\n          },\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"value\",\n            \"type\": \"uint256\"\n          },\n          {\n            \"internalType\": \"address\",\n            \"name\": \"tokenAddress\",\n            \"type\": \"address\"\n          },\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"tokenAmount\",\n            \"type\": \"uint256\"\n          },\n          {\n            \"internalType\": \"address\",\n            \"name\": \"outputToken\",\n            \"type\": \"address\"\n          },\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"minOutputAmount\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"internalType\": \"struct Berabundle_SwapBundler.Operation[]\",\n        \"name\": \"operations\",\n        \"type\": \"tuple[]\"\n      }\n    ],\n    \"name\": \"executeBundle\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n  }\n];\n\n// Operation types\nconst TYPE_APPROVE = 1;\nconst TYPE_SWAP = 2;\n\n// ERC20 Interface for approvals\nconst ERC20_ABI = [\n  'function approve(address spender, uint256 amount) returns (bool)'\n];\n\n/**\n * Service for interacting with the Berabundle_SwapBundler contract via Safe\n */\nclass BerabundlerService {\n  private contractAddress: string;\n  private sdk: any | null;\n  private bundlerApis: Record<number, string>;\n  private apiKey: string | null;\n\n  constructor() {\n    this.contractAddress = '0xF9b3593C58cd1A2e3D1Fc8ff44Da6421B5828c18';\n    this.sdk = null;\n    this.apiKey = null;\n    \n    this.bundlerApis = {\n      80085: 'https://api.oogabooga.com/v1/swap'\n    };\n  }\n\n  initialize(sdk: any, chainId: number, apiKey?: string): boolean {\n    this.sdk = sdk;\n    \n    // Set API key if provided\n    if (apiKey) {\n      this.apiKey = apiKey;\n    }\n    \n    // Potentially switch contract address based on chain\n    if (chainId !== 80085) {\n      console.warn(`BerabundlerService: Chain ID ${chainId} is not fully supported yet`);\n    }\n    \n    return Boolean(this.sdk);\n  }\n  \n  /**\n   * Set the API key\n   */\n  setApiKey(apiKey: string): void {\n    this.apiKey = apiKey;\n  }\n\n  /**\n   * Check if the service is initialized\n   */\n  isInitialized(): boolean {\n    return Boolean(this.sdk);\n  }\n\n  /**\n   * Create operations for token approvals\n   */\n  createApprovalOperations(approvalTxs: any[]): SwapOperation[] {\n    return approvalTxs.map(tx => {\n      if (!tx.to || !tx.token || !tx.token.address) {\n        console.error(\"Invalid approval transaction:\", tx);\n        return null;\n      }\n      \n      return {\n        operationType: TYPE_APPROVE,\n        target: tx.to, // The router/spender address\n        data: \"0x\", // We don't need data for approvals as the contract handles it\n        value: \"0\",\n        tokenAddress: tx.token.address, // The token contract address\n        tokenAmount: ethers.MaxUint256.toString(), // Max approval\n        outputToken: ethers.ZeroAddress, // Not used for approvals\n        minOutputAmount: \"0\" // Not used for approvals\n      };\n    }).filter(op => op !== null) as SwapOperation[];\n  }\n\n  /**\n   * Create operations for token swaps\n   */\n  createSwapOperations(swapTxs: any[]): SwapOperation[] {\n    return swapTxs.map(tx => {\n      // Check if this is a native token or ERC20 token swap\n      const isNativeToken = tx.token.address === 'native' || tx.token.symbol === 'BERA' || tx.token.isNative;\n      \n      // Extract swapParams for the swap\n      const swapParams = tx.swapParams || {};\n      \n      // Use API's transaction data directly\n      return {\n        operationType: TYPE_SWAP,\n        target: tx.to, // Router address from API\n        data: tx.data, // Use exact data from API response\n        value: tx.value || \"0\",\n        tokenAddress: isNativeToken ? ethers.ZeroAddress : tx.token.address,\n        tokenAmount: isNativeToken ? \"0\" : tx.token.amountIn || tx.amount || \"0\",\n        outputToken: swapParams.outputToken || ethers.ZeroAddress,\n        minOutputAmount: swapParams.minOutput || \"0\"\n      };\n    });\n  }\n\n  /**\n   * Create direct approval transactions for the Safe\n   */\n  async createApprovalTransactions(\n    tokenAmount: TokenAmount, \n    routerAddress: string\n  ): Promise<any[]> {\n    if (!this.isInitialized()) throw new Error(\"BerabundlerService not initialized\");\n    \n    const { token, amount } = tokenAmount;\n    \n    // Skip native token (no approval needed)\n    if (token.isNative || token.address === 'native' || token.symbol === 'BERA') {\n      return [];\n    }\n    \n    // Create approval transaction\n    const erc20Interface = new ethers.Interface(ERC20_ABI);\n    const data = erc20Interface.encodeFunctionData('approve', [\n      routerAddress,\n      ethers.parseUnits(amount, token.decimals)\n    ]);\n    \n    return [{\n      to: token.address,\n      value: \"0\",\n      data\n    }];\n  }\n\n  /**\n   * Prepare swap transactions for the berabundle contract via Safe\n   */\n  async prepareBundleTransactions(\n    selectedTokens: TokenAmount[],\n    targetToken: Token,\n    slippageTolerance: number = 0.5\n  ): Promise<{\n    success: boolean;\n    txs?: any[];\n    error?: string;\n    totalValueUsd?: number;\n    estimatedOutput?: string;\n  }> {\n    if (!this.isInitialized()) {\n      return { success: false, error: \"BerabundlerService not initialized\" };\n    }\n\n    try {\n      // 1. Prepare API requests for each token swap\n      const swapRequests = await Promise.all(\n        selectedTokens.map(async ({ token, amount }) => {\n          // Skip tokens with zero amount\n          if (parseFloat(amount) <= 0) return null;\n          \n          try {\n            // Get real swap quote from OogaBooga API\n            const apiResponse = await this.getSwapQuote(token, amount, targetToken);\n            \n            return {\n              ...apiResponse,\n              token,\n              amount\n            };\n          } catch (error) {\n            console.error(`Failed to get swap quote for ${token.symbol}:`, error);\n            throw error;\n          }\n        })\n      );\n\n      // Filter out null results\n      const validSwapRequests = swapRequests.filter(req => req !== null) as any[];\n      \n      if (validSwapRequests.length === 0) {\n        return { success: false, error: \"No valid swaps to execute\" };\n      }\n\n      // 2. Create operations for the bundle\n      const operations = [\n        ...this.createSwapOperations(validSwapRequests)\n      ];\n\n      // 3. Calculate total value for native token transfers\n      let totalValue = ethers.parseEther(\"0\");\n      let totalValueUsd = 0;\n      let estimatedOutput = ethers.parseEther(\"0\");\n      \n      operations.forEach(op => {\n        if (op.value && op.value !== \"0\") {\n          const opValue = ethers.parseUnits(op.value, 18);\n          totalValue = totalValue + opValue;\n        }\n        \n        // Track USD value and estimated output for UI\n        const token = selectedTokens.find(t => \n          t.token.address === op.tokenAddress || \n          (op.tokenAddress === ethers.ZeroAddress && t.token.isNative)\n        );\n        \n        if (token && token.token.priceUsd) {\n          totalValueUsd += parseFloat(token.amount) * token.token.priceUsd;\n        }\n      });\n\n      // Estimate output in target token\n      if (targetToken.priceUsd && totalValueUsd > 0) {\n        const outputAmount = totalValueUsd / targetToken.priceUsd;\n        estimatedOutput = outputAmount.toString();\n      }\n\n      // 4. Encode calldata for the berabundle contract\n      const berabundleInterface = new ethers.Interface(BERABUNDLE_ABI);\n      const calldata = berabundleInterface.encodeFunctionData('executeBundle', [operations]);\n\n      // 5. Create transaction for the Safe\n      const transaction = {\n        to: this.contractAddress,\n        value: totalValue.toString(),\n        data: calldata\n      };\n\n      return {\n        success: true,\n        txs: [transaction],\n        totalValueUsd,\n        estimatedOutput: estimatedOutput.toString()\n      };\n    } catch (error: any) {\n      console.error(\"Error preparing bundle transactions:\", error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Get a swap quote from the OogaBooga API\n   */\n  private async getSwapQuote(\n    inputToken: Token, \n    amount: string, \n    outputToken: Token\n  ): Promise<any> {\n    if (!this.apiKey) {\n      throw new Error('API key not set. Please set your OogaBooga API key.');\n    }\n\n    try {\n      // Prepare API request\n      const chainId = 80085; // Berachain testnet\n      const apiEndpoint = this.bundlerApis[chainId];\n      \n      if (!apiEndpoint) {\n        throw new Error(`No API endpoint for chain ID ${chainId}`);\n      }\n      \n      const isNative = inputToken.isNative || inputToken.symbol === 'BERA';\n      const amountBN = ethers.parseUnits(amount, inputToken.decimals);\n      \n      // Make the API request\n      const response = await fetch(apiEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiKey}`\n        },\n        body: JSON.stringify({\n          chainId,\n          tokenIn: isNative ? 'native' : inputToken.address,\n          tokenOut: outputToken.address,\n          amount: amountBN.toString(),\n          slippage: 0.5 // 0.5% slippage\n        })\n      });\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`API request failed: ${response.status} ${errorText}`);\n      }\n      \n      const data = await response.json();\n      \n      return {\n        to: data.routerAddress,\n        data: data.calldata,\n        value: isNative ? amountBN.toString() : \"0\",\n        swapParams: {\n          outputToken: outputToken.address,\n          minOutput: data.minOutputAmount,\n          router: data.routerAddress\n        }\n      };\n    } catch (error) {\n      console.error('Error fetching swap quote:', error);\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nconst berabundlerService = new BerabundlerService();\nexport default berabundlerService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}