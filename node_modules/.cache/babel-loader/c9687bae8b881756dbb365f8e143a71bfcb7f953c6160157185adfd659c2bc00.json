{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TXs = void 0;\nconst methods_1 = require(\"../communication/methods\");\nconst types_1 = require(\"../types\");\nclass TXs {\n  constructor(communicator) {\n    this.communicator = communicator;\n  }\n  async getBySafeTxHash(safeTxHash) {\n    if (!safeTxHash) {\n      throw new Error('Invalid safeTxHash');\n    }\n    const response = await this.communicator.send(methods_1.Methods.getTxBySafeTxHash, {\n      safeTxHash\n    });\n    return response.data;\n  }\n  async signMessage(message) {\n    const messagePayload = {\n      message\n    };\n    const response = await this.communicator.send(methods_1.Methods.signMessage, messagePayload);\n    return response.data;\n  }\n  async signTypedMessage(typedData) {\n    if (!(0, types_1.isObjectEIP712TypedData)(typedData)) {\n      throw new Error('Invalid typed data');\n    }\n    const response = await this.communicator.send(methods_1.Methods.signTypedMessage, {\n      typedData\n    });\n    return response.data;\n  }\n  async send(_ref) {\n    let {\n      txs,\n      params\n    } = _ref;\n    if (!txs || !txs.length) {\n      throw new Error('No transactions were passed');\n    }\n    const messagePayload = {\n      txs,\n      params\n    };\n    const response = await this.communicator.send(methods_1.Methods.sendTransactions, messagePayload);\n    return response.data;\n  }\n}\nexports.TXs = TXs;","map":{"version":3,"names":["methods_1","require","types_1","TXs","constructor","communicator","getBySafeTxHash","safeTxHash","Error","response","send","Methods","getTxBySafeTxHash","data","signMessage","message","messagePayload","signTypedMessage","typedData","isObjectEIP712TypedData","_ref","txs","params","length","sendTransactions","exports"],"sources":["/home/oliver/Projects/SafeSwap/node_modules/@safe-global/safe-apps-sdk/src/txs/index.ts"],"sourcesContent":["import { Methods } from '../communication/methods';\nimport {\n  GatewayTransactionDetails,\n  SignMessageParams,\n  SendTransactionsParams,\n  GetTxBySafeTxHashParams,\n  Communicator,\n  SendTransactionsResponse,\n  SignTypedMessageParams,\n  EIP712TypedData,\n  isObjectEIP712TypedData,\n} from '../types';\n\nclass TXs {\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n  }\n\n  async getBySafeTxHash(safeTxHash: string): Promise<GatewayTransactionDetails> {\n    if (!safeTxHash) {\n      throw new Error('Invalid safeTxHash');\n    }\n\n    const response = await this.communicator.send<\n      Methods.getTxBySafeTxHash,\n      GetTxBySafeTxHashParams,\n      GatewayTransactionDetails\n    >(Methods.getTxBySafeTxHash, { safeTxHash });\n\n    return response.data;\n  }\n\n  async signMessage(message: string): Promise<SendTransactionsResponse> {\n    const messagePayload = {\n      message,\n    };\n\n    const response = await this.communicator.send<Methods.signMessage, SignMessageParams, SendTransactionsResponse>(\n      Methods.signMessage,\n      messagePayload,\n    );\n\n    return response.data;\n  }\n\n  async signTypedMessage(typedData: EIP712TypedData): Promise<SendTransactionsResponse> {\n    if (!isObjectEIP712TypedData(typedData)) {\n      throw new Error('Invalid typed data');\n    }\n\n    const response = await this.communicator.send<\n      Methods.signTypedMessage,\n      SignTypedMessageParams,\n      SendTransactionsResponse\n    >(Methods.signTypedMessage, { typedData });\n\n    return response.data;\n  }\n\n  async send({ txs, params }: SendTransactionsParams): Promise<SendTransactionsResponse> {\n    if (!txs || !txs.length) {\n      throw new Error('No transactions were passed');\n    }\n\n    const messagePayload = {\n      txs,\n      params,\n    };\n\n    const response = await this.communicator.send<\n      Methods.sendTransactions,\n      SendTransactionsParams,\n      SendTransactionsResponse\n    >(Methods.sendTransactions, messagePayload);\n\n    return response.data;\n  }\n}\n\nexport { TXs };\n"],"mappings":";;;;;;AAAA,MAAAA,SAAA,GAAAC,OAAA;AACA,MAAAC,OAAA,GAAAD,OAAA;AAYA,MAAME,GAAG;EAGPC,YAAYC,YAA0B;IACpC,IAAI,CAACA,YAAY,GAAGA,YAAY;EAClC;EAEA,MAAMC,eAAeA,CAACC,UAAkB;IACtC,IAAI,CAACA,UAAU,EAAE;MACf,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;;IAGvC,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACJ,YAAY,CAACK,IAAI,CAI3CV,SAAA,CAAAW,OAAO,CAACC,iBAAiB,EAAE;MAAEL;IAAU,CAAE,CAAC;IAE5C,OAAOE,QAAQ,CAACI,IAAI;EACtB;EAEA,MAAMC,WAAWA,CAACC,OAAe;IAC/B,MAAMC,cAAc,GAAG;MACrBD;KACD;IAED,MAAMN,QAAQ,GAAG,MAAM,IAAI,CAACJ,YAAY,CAACK,IAAI,CAC3CV,SAAA,CAAAW,OAAO,CAACG,WAAW,EACnBE,cAAc,CACf;IAED,OAAOP,QAAQ,CAACI,IAAI;EACtB;EAEA,MAAMI,gBAAgBA,CAACC,SAA0B;IAC/C,IAAI,CAAC,IAAAhB,OAAA,CAAAiB,uBAAuB,EAACD,SAAS,CAAC,EAAE;MACvC,MAAM,IAAIV,KAAK,CAAC,oBAAoB,CAAC;;IAGvC,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACJ,YAAY,CAACK,IAAI,CAI3CV,SAAA,CAAAW,OAAO,CAACM,gBAAgB,EAAE;MAAEC;IAAS,CAAE,CAAC;IAE1C,OAAOT,QAAQ,CAACI,IAAI;EACtB;EAEA,MAAMH,IAAIA,CAAAU,IAAA,EAAwC;IAAA,IAAvC;MAAEC,GAAG;MAAEC;IAAM,CAA0B,GAAAF,IAAA;IAChD,IAAI,CAACC,GAAG,IAAI,CAACA,GAAG,CAACE,MAAM,EAAE;MACvB,MAAM,IAAIf,KAAK,CAAC,6BAA6B,CAAC;;IAGhD,MAAMQ,cAAc,GAAG;MACrBK,GAAG;MACHC;KACD;IAED,MAAMb,QAAQ,GAAG,MAAM,IAAI,CAACJ,YAAY,CAACK,IAAI,CAI3CV,SAAA,CAAAW,OAAO,CAACa,gBAAgB,EAAER,cAAc,CAAC;IAE3C,OAAOP,QAAQ,CAACI,IAAI;EACtB;;AAGOY,OAAA,CAAAtB,GAAA,GAAAA,GAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}