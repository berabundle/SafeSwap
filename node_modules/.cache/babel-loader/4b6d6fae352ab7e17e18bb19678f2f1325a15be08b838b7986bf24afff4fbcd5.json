{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Eth = void 0;\nconst constants_1 = require(\"../eth/constants\");\nconst methods_1 = require(\"../communication/methods\");\nconst inputFormatters = {\n  defaultBlockParam: function () {\n    let arg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'latest';\n    return arg;\n  },\n  returnFullTxObjectParam: function () {\n    let arg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return arg;\n  },\n  blockNumberToHex: arg => Number.isInteger(arg) ? `0x${arg.toString(16)}` : arg\n};\nclass Eth {\n  constructor(communicator) {\n    this.communicator = communicator;\n    this.call = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_call,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getBalance = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getBalance,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getCode = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getCode,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getStorageAt = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getStorageAt,\n      formatters: [null, inputFormatters.blockNumberToHex, inputFormatters.defaultBlockParam]\n    });\n    this.getPastLogs = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getLogs\n    });\n    this.getBlockByHash = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getBlockByHash,\n      formatters: [null, inputFormatters.returnFullTxObjectParam]\n    });\n    this.getBlockByNumber = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getBlockByNumber,\n      formatters: [inputFormatters.blockNumberToHex, inputFormatters.returnFullTxObjectParam]\n    });\n    this.getTransactionByHash = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getTransactionByHash\n    });\n    this.getTransactionReceipt = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getTransactionReceipt\n    });\n    this.getTransactionCount = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getTransactionCount,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getGasPrice = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_gasPrice\n    });\n    this.getEstimateGas = transaction => this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_estimateGas\n    })([transaction]);\n  }\n  buildRequest(args) {\n    const {\n      call,\n      formatters\n    } = args;\n    return async params => {\n      if (formatters && Array.isArray(params)) {\n        formatters.forEach((formatter, i) => {\n          if (formatter) {\n            params[i] = formatter(params[i]);\n          }\n        });\n      }\n      const payload = {\n        call,\n        params: params || []\n      };\n      const response = await this.communicator.send(methods_1.Methods.rpcCall, payload);\n      return response.data;\n    };\n  }\n}\nexports.Eth = Eth;","map":{"version":3,"names":["constants_1","require","methods_1","inputFormatters","defaultBlockParam","arg","arguments","length","undefined","returnFullTxObjectParam","blockNumberToHex","Number","isInteger","toString","Eth","constructor","communicator","call","buildRequest","RPC_CALLS","eth_call","formatters","getBalance","eth_getBalance","getCode","eth_getCode","getStorageAt","eth_getStorageAt","getPastLogs","eth_getLogs","getBlockByHash","eth_getBlockByHash","getBlockByNumber","eth_getBlockByNumber","getTransactionByHash","eth_getTransactionByHash","getTransactionReceipt","eth_getTransactionReceipt","getTransactionCount","eth_getTransactionCount","getGasPrice","eth_gasPrice","getEstimateGas","transaction","eth_estimateGas","args","params","Array","isArray","forEach","formatter","i","payload","response","send","Methods","rpcCall","data","exports"],"sources":["/home/oliver/Projects/SafeSwap/node_modules/@safe-global/safe-apps-sdk/src/eth/index.ts"],"sourcesContent":["import { RPC_CALLS } from '../eth/constants';\nimport {\n  BlockNumberArg,\n  RpcCallNames,\n  Communicator,\n  Log,\n  BlockTransactionString,\n  BlockTransactionObject,\n  Web3TransactionObject,\n  RPCPayload,\n  TransactionConfig,\n  Web3TransactionReceiptObject,\n  PastLogsOptions,\n} from '../types';\nimport { Methods } from '../communication/methods';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Formatter = (arg: any) => any;\n\nconst inputFormatters: Record<string, Formatter> = {\n  defaultBlockParam: (arg = 'latest') => arg,\n  returnFullTxObjectParam: (arg = false): boolean => arg,\n  blockNumberToHex: (arg: BlockNumberArg): string =>\n    Number.isInteger(arg) ? `0x${arg.toString(16)}` : (arg as string),\n};\n\ntype BuildRequestArgs = {\n  call: RpcCallNames;\n  formatters?: (Formatter | null)[];\n};\n\nclass Eth {\n  public call;\n  public getBalance;\n  public getCode;\n  public getStorageAt;\n  public getPastLogs;\n  public getBlockByHash;\n  public getBlockByNumber;\n  public getTransactionByHash;\n  public getTransactionReceipt;\n  public getTransactionCount;\n  public getGasPrice;\n  public getEstimateGas;\n\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n    this.call = this.buildRequest<[TransactionConfig, string?], string>({\n      call: RPC_CALLS.eth_call,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getBalance = this.buildRequest<[string, string?], string>({\n      call: RPC_CALLS.eth_getBalance,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getCode = this.buildRequest<[string, string?], string>({\n      call: RPC_CALLS.eth_getCode,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getStorageAt = this.buildRequest<[string, number, string?], string>({\n      call: RPC_CALLS.eth_getStorageAt,\n      formatters: [null, inputFormatters.blockNumberToHex, inputFormatters.defaultBlockParam],\n    });\n    this.getPastLogs = this.buildRequest<[PastLogsOptions], Log[]>({\n      call: RPC_CALLS.eth_getLogs,\n    });\n    this.getBlockByHash = this.buildRequest<[string, boolean?], BlockTransactionString | BlockTransactionObject>({\n      call: RPC_CALLS.eth_getBlockByHash,\n      formatters: [null, inputFormatters.returnFullTxObjectParam],\n    });\n    this.getBlockByNumber = this.buildRequest<\n      [BlockNumberArg, boolean?],\n      BlockTransactionString | BlockTransactionObject\n    >({\n      call: RPC_CALLS.eth_getBlockByNumber,\n      formatters: [inputFormatters.blockNumberToHex, inputFormatters.returnFullTxObjectParam],\n    });\n    this.getTransactionByHash = this.buildRequest<[string], Web3TransactionObject>({\n      call: RPC_CALLS.eth_getTransactionByHash,\n    });\n    this.getTransactionReceipt = this.buildRequest<[string], Web3TransactionReceiptObject>({\n      call: RPC_CALLS.eth_getTransactionReceipt,\n    });\n    this.getTransactionCount = this.buildRequest<[string, string?], string>({\n      call: RPC_CALLS.eth_getTransactionCount,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getGasPrice = this.buildRequest<never[], string>({\n      call: RPC_CALLS.eth_gasPrice,\n    });\n    this.getEstimateGas = (transaction: TransactionConfig): Promise<number> =>\n      this.buildRequest<[TransactionConfig], number>({\n        call: RPC_CALLS.eth_estimateGas,\n      })([transaction]);\n  }\n\n  private buildRequest<P = never[], R = unknown>(args: BuildRequestArgs) {\n    const { call, formatters } = args;\n\n    return async (params?: P): Promise<R> => {\n      if (formatters && Array.isArray(params)) {\n        formatters.forEach((formatter: ((...args: unknown[]) => unknown) | null, i) => {\n          if (formatter) {\n            params[i] = formatter(params[i]);\n          }\n        });\n      }\n\n      const payload: RPCPayload<P> = {\n        call,\n        params: params || [],\n      };\n\n      const response = await this.communicator.send<Methods.rpcCall, RPCPayload<P>, R>(Methods.rpcCall, payload);\n\n      return response.data;\n    };\n  }\n}\n\nexport { Eth };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}