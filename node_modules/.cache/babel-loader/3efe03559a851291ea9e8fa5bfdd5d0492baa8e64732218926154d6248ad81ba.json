{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SafeAppProvider = void 0;\nconst events_1 = require(\"events\");\nconst utils_1 = require(\"./utils\");\n// The API is based on Ethereum JavaScript API Provider Standard. Link: https://eips.ethereum.org/EIPS/eip-1193\nclass SafeAppProvider extends events_1.EventEmitter {\n  constructor(safe, sdk) {\n    super();\n    this.submittedTxs = new Map();\n    this.safe = safe;\n    this.sdk = sdk;\n  }\n  async connect() {\n    this.emit('connect', {\n      chainId: this.chainId\n    });\n    return;\n  }\n  async disconnect() {\n    return;\n  }\n  get chainId() {\n    return this.safe.chainId;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async request(request) {\n    const {\n      method,\n      params = []\n    } = request;\n    switch (method) {\n      case 'eth_accounts':\n        return [this.safe.safeAddress];\n      case 'net_version':\n      case 'eth_chainId':\n        return `0x${this.chainId.toString(16)}`;\n      case 'personal_sign':\n        {\n          const [message, address] = params;\n          if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase()) {\n            throw new Error('The address or message hash is invalid');\n          }\n          await this.sdk.txs.signMessage(message);\n          return '0x';\n        }\n      case 'eth_sign':\n        {\n          const [address, messageHash] = params;\n          if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase() || !messageHash.startsWith('0x')) {\n            throw new Error('The address or message hash is invalid');\n          }\n          await this.sdk.txs.signMessage(messageHash);\n          return '0x';\n        }\n      case 'eth_signTypedData':\n      case 'eth_signTypedData_v4':\n        {\n          const [address, typedData] = params;\n          const parsedTypedData = typeof typedData === 'string' ? JSON.parse(typedData) : typedData;\n          if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase()) {\n            throw new Error('The address is invalid');\n          }\n          await this.sdk.txs.signTypedMessage(parsedTypedData);\n          return '0x';\n        }\n      case 'eth_sendTransaction':\n        const tx = Object.assign({\n          value: '0',\n          data: '0x'\n        }, params[0]);\n        // Some ethereum libraries might pass the gas as a hex-encoded string\n        // We need to convert it to a number because the SDK expects a number and our backend only supports\n        // Decimal numbers\n        if (typeof tx.gas === 'string' && tx.gas.startsWith('0x')) {\n          tx.gas = parseInt(tx.gas, 16);\n        }\n        const resp = await this.sdk.txs.send({\n          txs: [tx],\n          params: {\n            safeTxGas: tx.gas\n          }\n        });\n        // Store fake transaction\n        this.submittedTxs.set(resp.safeTxHash, {\n          from: this.safe.safeAddress,\n          hash: resp.safeTxHash,\n          gas: 0,\n          gasPrice: '0x00',\n          nonce: 0,\n          input: tx.data,\n          value: tx.value,\n          to: tx.to,\n          blockHash: null,\n          blockNumber: null,\n          transactionIndex: null\n        });\n        return resp.safeTxHash;\n      case 'eth_blockNumber':\n        const block = await this.sdk.eth.getBlockByNumber(['latest']);\n        return block.number;\n      case 'eth_getBalance':\n        return this.sdk.eth.getBalance([(0, utils_1.getLowerCase)(params[0]), params[1]]);\n      case 'eth_getCode':\n        return this.sdk.eth.getCode([(0, utils_1.getLowerCase)(params[0]), params[1]]);\n      case 'eth_getTransactionCount':\n        return this.sdk.eth.getTransactionCount([(0, utils_1.getLowerCase)(params[0]), params[1]]);\n      case 'eth_getStorageAt':\n        return this.sdk.eth.getStorageAt([(0, utils_1.getLowerCase)(params[0]), params[1], params[2]]);\n      case 'eth_getBlockByNumber':\n        return this.sdk.eth.getBlockByNumber([params[0], params[1]]);\n      case 'eth_getBlockByHash':\n        return this.sdk.eth.getBlockByHash([params[0], params[1]]);\n      case 'eth_getTransactionByHash':\n        let txHash = params[0];\n        try {\n          const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n          txHash = resp.txHash || txHash;\n        } catch (e) {}\n        // Use fake transaction if we don't have a real tx hash\n        if (this.submittedTxs.has(txHash)) {\n          return this.submittedTxs.get(txHash);\n        }\n        return this.sdk.eth.getTransactionByHash([txHash]).then(tx => {\n          // We set the tx hash to the one requested, as some provider assert this\n          if (tx) {\n            tx.hash = params[0];\n          }\n          return tx;\n        });\n      case 'eth_getTransactionReceipt':\n        {\n          let txHash = params[0];\n          try {\n            const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n            txHash = resp.txHash || txHash;\n          } catch (e) {}\n          return this.sdk.eth.getTransactionReceipt([txHash]).then(tx => {\n            // We set the tx hash to the one requested, as some provider assert this\n            if (tx) {\n              tx.transactionHash = params[0];\n            }\n            return tx;\n          });\n        }\n      case 'eth_estimateGas':\n        {\n          return this.sdk.eth.getEstimateGas(params[0]);\n        }\n      case 'eth_call':\n        {\n          return this.sdk.eth.call([params[0], params[1]]);\n        }\n      case 'eth_getLogs':\n        return this.sdk.eth.getPastLogs([params[0]]);\n      case 'eth_gasPrice':\n        return this.sdk.eth.getGasPrice();\n      case 'wallet_getPermissions':\n        return this.sdk.wallet.getPermissions();\n      case 'wallet_requestPermissions':\n        return this.sdk.wallet.requestPermissions(params[0]);\n      default:\n        throw Error(`\"${request.method}\" not implemented`);\n    }\n  }\n  // this method is needed for ethers v4\n  // https://github.com/ethers-io/ethers.js/blob/427e16826eb15d52d25c4f01027f8db22b74b76c/src.ts/providers/web3-provider.ts#L41-L55\n  send(request, callback) {\n    if (!request) callback('Undefined request');\n    this.request(request).then(result => callback(null, {\n      jsonrpc: '2.0',\n      id: request.id,\n      result\n    })).catch(error => callback(error, null));\n  }\n}\nexports.SafeAppProvider = SafeAppProvider;","map":{"version":3,"names":["events_1","require","utils_1","SafeAppProvider","EventEmitter","constructor","safe","sdk","submittedTxs","Map","connect","emit","chainId","disconnect","request","method","params","safeAddress","toString","message","address","toLowerCase","Error","txs","signMessage","messageHash","startsWith","typedData","parsedTypedData","JSON","parse","signTypedMessage","tx","Object","assign","value","data","gas","parseInt","resp","send","safeTxGas","set","safeTxHash","from","hash","gasPrice","nonce","input","to","blockHash","blockNumber","transactionIndex","block","eth","getBlockByNumber","number","getBalance","getLowerCase","getCode","getTransactionCount","getStorageAt","getBlockByHash","txHash","getBySafeTxHash","e","has","get","getTransactionByHash","then","getTransactionReceipt","transactionHash","getEstimateGas","call","getPastLogs","getGasPrice","wallet","getPermissions","requestPermissions","callback","result","jsonrpc","id","catch","error","exports"],"sources":["/home/oliver/Projects/SafeSwap/node_modules/@safe-global/safe-apps-provider/src/provider.ts"],"sourcesContent":["import SafeAppsSDK, { SafeInfo, Web3TransactionObject } from '@safe-global/safe-apps-sdk';\nimport { EventEmitter } from 'events';\nimport { EIP1193Provider } from './types';\nimport { getLowerCase } from './utils';\n\n// The API is based on Ethereum JavaScript API Provider Standard. Link: https://eips.ethereum.org/EIPS/eip-1193\nexport class SafeAppProvider extends EventEmitter implements EIP1193Provider {\n  private readonly safe: SafeInfo;\n  private readonly sdk: SafeAppsSDK;\n  private submittedTxs = new Map<string, Web3TransactionObject>();\n\n  constructor(safe: SafeInfo, sdk: SafeAppsSDK) {\n    super();\n    this.safe = safe;\n    this.sdk = sdk;\n  }\n\n  async connect(): Promise<void> {\n    this.emit('connect', { chainId: this.chainId });\n    return;\n  }\n\n  async disconnect(): Promise<void> {\n    return;\n  }\n\n  public get chainId(): number {\n    return this.safe.chainId;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async request(request: { method: string; params?: any[] }): Promise<any> {\n    const { method, params = [] } = request;\n\n    switch (method) {\n      case 'eth_accounts':\n        return [this.safe.safeAddress];\n\n      case 'net_version':\n      case 'eth_chainId':\n        return `0x${this.chainId.toString(16)}`;\n\n      case 'personal_sign': {\n        const [message, address] = params;\n\n        if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase()) {\n          throw new Error('The address or message hash is invalid');\n        }\n\n        await this.sdk.txs.signMessage(message);\n\n        return '0x';\n      }\n\n      case 'eth_sign': {\n        const [address, messageHash] = params;\n\n        if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase() || !messageHash.startsWith('0x')) {\n          throw new Error('The address or message hash is invalid');\n        }\n\n        await this.sdk.txs.signMessage(messageHash);\n\n        return '0x';\n      }\n\n      case 'eth_signTypedData':\n      case 'eth_signTypedData_v4': {\n        const [address, typedData] = params;\n        const parsedTypedData = typeof typedData === 'string' ? JSON.parse(typedData) : typedData;\n\n        if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase()) {\n          throw new Error('The address is invalid');\n        }\n\n        await this.sdk.txs.signTypedMessage(parsedTypedData);\n\n        return '0x';\n      }\n\n      case 'eth_sendTransaction':\n        const tx = {\n          value: '0',\n          data: '0x',\n          ...params[0],\n        };\n\n        // Some ethereum libraries might pass the gas as a hex-encoded string\n        // We need to convert it to a number because the SDK expects a number and our backend only supports\n        // Decimal numbers\n        if (typeof tx.gas === 'string' && tx.gas.startsWith('0x')) {\n          tx.gas = parseInt(tx.gas, 16);\n        }\n\n        const resp = await this.sdk.txs.send({\n          txs: [tx],\n          params: { safeTxGas: tx.gas },\n        });\n\n        // Store fake transaction\n        this.submittedTxs.set(resp.safeTxHash, {\n          from: this.safe.safeAddress,\n          hash: resp.safeTxHash,\n          gas: 0,\n          gasPrice: '0x00',\n          nonce: 0,\n          input: tx.data,\n          value: tx.value,\n          to: tx.to,\n          blockHash: null,\n          blockNumber: null,\n          transactionIndex: null,\n        });\n        return resp.safeTxHash;\n\n      case 'eth_blockNumber':\n        const block = await this.sdk.eth.getBlockByNumber(['latest']);\n\n        return block.number;\n\n      case 'eth_getBalance':\n        return this.sdk.eth.getBalance([getLowerCase(params[0]), params[1]]);\n\n      case 'eth_getCode':\n        return this.sdk.eth.getCode([getLowerCase(params[0]), params[1]]);\n\n      case 'eth_getTransactionCount':\n        return this.sdk.eth.getTransactionCount([getLowerCase(params[0]), params[1]]);\n\n      case 'eth_getStorageAt':\n        return this.sdk.eth.getStorageAt([getLowerCase(params[0]), params[1], params[2]]);\n\n      case 'eth_getBlockByNumber':\n        return this.sdk.eth.getBlockByNumber([params[0], params[1]]);\n\n      case 'eth_getBlockByHash':\n        return this.sdk.eth.getBlockByHash([params[0], params[1]]);\n\n      case 'eth_getTransactionByHash':\n        let txHash = params[0];\n        try {\n          const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n          txHash = resp.txHash || txHash;\n        } catch (e) {}\n        // Use fake transaction if we don't have a real tx hash\n        if (this.submittedTxs.has(txHash)) {\n          return this.submittedTxs.get(txHash);\n        }\n        return this.sdk.eth.getTransactionByHash([txHash]).then((tx) => {\n          // We set the tx hash to the one requested, as some provider assert this\n          if (tx) {\n            tx.hash = params[0];\n          }\n          return tx;\n        });\n\n      case 'eth_getTransactionReceipt': {\n        let txHash = params[0];\n        try {\n          const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n          txHash = resp.txHash || txHash;\n        } catch (e) {}\n        return this.sdk.eth.getTransactionReceipt([txHash]).then((tx) => {\n          // We set the tx hash to the one requested, as some provider assert this\n          if (tx) {\n            tx.transactionHash = params[0];\n          }\n          return tx;\n        });\n      }\n\n      case 'eth_estimateGas': {\n        return this.sdk.eth.getEstimateGas(params[0]);\n      }\n\n      case 'eth_call': {\n        return this.sdk.eth.call([params[0], params[1]]);\n      }\n\n      case 'eth_getLogs':\n        return this.sdk.eth.getPastLogs([params[0]]);\n\n      case 'eth_gasPrice':\n        return this.sdk.eth.getGasPrice();\n\n      case 'wallet_getPermissions':\n        return this.sdk.wallet.getPermissions();\n\n      case 'wallet_requestPermissions':\n        return this.sdk.wallet.requestPermissions(params[0]);\n\n      default:\n        throw Error(`\"${request.method}\" not implemented`);\n    }\n  }\n\n  // this method is needed for ethers v4\n  // https://github.com/ethers-io/ethers.js/blob/427e16826eb15d52d25c4f01027f8db22b74b76c/src.ts/providers/web3-provider.ts#L41-L55\n  send(request: any, callback: (error: any, response?: any) => void): void {\n    if (!request) callback('Undefined request');\n    this.request(request)\n      .then((result) => callback(null, { jsonrpc: '2.0', id: request.id, result }))\n      .catch((error) => callback(error, null));\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}