{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Safe = void 0;\nconst ethers_1 = require(\"ethers\");\nconst signatures_1 = require(\"./signatures\");\nconst methods_1 = require(\"../communication/methods\");\nconst constants_1 = require(\"../eth/constants\");\nconst types_1 = require(\"../types\");\nconst requirePermissions_1 = __importDefault(require(\"../decorators/requirePermissions\"));\nclass Safe {\n  constructor(communicator) {\n    this.communicator = communicator;\n  }\n  async getChainInfo() {\n    const response = await this.communicator.send(methods_1.Methods.getChainInfo, undefined);\n    return response.data;\n  }\n  async getInfo() {\n    const response = await this.communicator.send(methods_1.Methods.getSafeInfo, undefined);\n    return response.data;\n  }\n  // There is a possibility that this method will change because we may add pagination to the endpoint\n  async experimental_getBalances() {\n    let {\n      currency = 'usd'\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const response = await this.communicator.send(methods_1.Methods.getSafeBalances, {\n      currency\n    });\n    return response.data;\n  }\n  async check1271Signature(messageHash) {\n    let signature = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0x';\n    const safeInfo = await this.getInfo();\n    const encodedIsValidSignatureCall = signatures_1.EIP_1271_INTERFACE.encodeFunctionData('isValidSignature', [messageHash, signature]);\n    const payload = {\n      call: constants_1.RPC_CALLS.eth_call,\n      params: [{\n        to: safeInfo.safeAddress,\n        data: encodedIsValidSignatureCall\n      }, 'latest']\n    };\n    try {\n      const response = await this.communicator.send(methods_1.Methods.rpcCall, payload);\n      return response.data.slice(0, 10).toLowerCase() === signatures_1.MAGIC_VALUE;\n    } catch (err) {\n      return false;\n    }\n  }\n  async check1271SignatureBytes(messageHash) {\n    let signature = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0x';\n    const safeInfo = await this.getInfo();\n    const msgBytes = ethers_1.ethers.utils.arrayify(messageHash);\n    const encodedIsValidSignatureCall = signatures_1.EIP_1271_BYTES_INTERFACE.encodeFunctionData('isValidSignature', [msgBytes, signature]);\n    const payload = {\n      call: constants_1.RPC_CALLS.eth_call,\n      params: [{\n        to: safeInfo.safeAddress,\n        data: encodedIsValidSignatureCall\n      }, 'latest']\n    };\n    try {\n      const response = await this.communicator.send(methods_1.Methods.rpcCall, payload);\n      return response.data.slice(0, 10).toLowerCase() === signatures_1.MAGIC_VALUE_BYTES;\n    } catch (err) {\n      return false;\n    }\n  }\n  calculateMessageHash(message) {\n    return ethers_1.ethers.utils.hashMessage(message);\n  }\n  calculateTypedMessageHash(typedMessage) {\n    return ethers_1.ethers.utils._TypedDataEncoder.hash(typedMessage.domain, typedMessage.types, typedMessage.message);\n  }\n  async isMessageSigned(message) {\n    let signature = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0x';\n    let check;\n    if (typeof message === 'string') {\n      check = async () => {\n        const messageHash = this.calculateMessageHash(message);\n        const messageHashSigned = await this.isMessageHashSigned(messageHash, signature);\n        return messageHashSigned;\n      };\n    }\n    if ((0, types_1.isObjectEIP712TypedData)(message)) {\n      check = async () => {\n        const messageHash = this.calculateTypedMessageHash(message);\n        const messageHashSigned = await this.isMessageHashSigned(messageHash, signature);\n        return messageHashSigned;\n      };\n    }\n    if (check) {\n      const isValid = await check();\n      return isValid;\n    }\n    throw new Error('Invalid message type');\n  }\n  async isMessageHashSigned(messageHash) {\n    let signature = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0x';\n    const checks = [this.check1271Signature.bind(this), this.check1271SignatureBytes.bind(this)];\n    for (const check of checks) {\n      const isValid = await check(messageHash, signature);\n      if (isValid) {\n        return true;\n      }\n    }\n    return false;\n  }\n  async getEnvironmentInfo() {\n    const response = await this.communicator.send(methods_1.Methods.getEnvironmentInfo, undefined);\n    return response.data;\n  }\n  async requestAddressBook() {\n    const response = await this.communicator.send(methods_1.Methods.requestAddressBook, undefined);\n    return response.data;\n  }\n}\n__decorate([(0, requirePermissions_1.default)()], Safe.prototype, \"requestAddressBook\", null);\nexports.Safe = Safe;","map":{"version":3,"names":["ethers_1","require","signatures_1","methods_1","constants_1","types_1","requirePermissions_1","__importDefault","Safe","constructor","communicator","getChainInfo","response","send","Methods","undefined","data","getInfo","getSafeInfo","experimental_getBalances","currency","arguments","length","getSafeBalances","check1271Signature","messageHash","signature","safeInfo","encodedIsValidSignatureCall","EIP_1271_INTERFACE","encodeFunctionData","payload","call","RPC_CALLS","eth_call","params","to","safeAddress","rpcCall","slice","toLowerCase","MAGIC_VALUE","err","check1271SignatureBytes","msgBytes","ethers","utils","arrayify","EIP_1271_BYTES_INTERFACE","MAGIC_VALUE_BYTES","calculateMessageHash","message","hashMessage","calculateTypedMessageHash","typedMessage","_TypedDataEncoder","hash","domain","types","isMessageSigned","check","messageHashSigned","isMessageHashSigned","isObjectEIP712TypedData","isValid","Error","checks","bind","getEnvironmentInfo","requestAddressBook","__decorate","default","exports"],"sources":["/home/oliver/Projects/SafeSwap/node_modules/@safe-global/safe-apps-sdk/src/safe/index.ts"],"sourcesContent":["import { ethers } from 'ethers';\nimport { EIP_1271_INTERFACE, EIP_1271_BYTES_INTERFACE, MAGIC_VALUE_BYTES, MAGIC_VALUE } from './signatures';\nimport { Methods } from '../communication/methods';\nimport { RPC_CALLS } from '../eth/constants';\nimport {\n  Communicator,\n  SafeInfo,\n  ChainInfo,\n  SafeBalances,\n  GetBalanceParams,\n  RPCPayload,\n  TransactionConfig,\n  EnvironmentInfo,\n  AddressBookItem,\n  isObjectEIP712TypedData,\n  EIP712TypedData,\n} from '../types';\nimport requirePermission from '../decorators/requirePermissions';\n\nclass Safe {\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n  }\n\n  async getChainInfo(): Promise<ChainInfo> {\n    const response = await this.communicator.send<Methods.getChainInfo, undefined, ChainInfo>(\n      Methods.getChainInfo,\n      undefined,\n    );\n\n    return response.data;\n  }\n\n  async getInfo(): Promise<SafeInfo> {\n    const response = await this.communicator.send<Methods.getSafeInfo, undefined, SafeInfo>(\n      Methods.getSafeInfo,\n      undefined,\n    );\n\n    return response.data;\n  }\n\n  // There is a possibility that this method will change because we may add pagination to the endpoint\n  async experimental_getBalances({ currency = 'usd' }: GetBalanceParams = {}): Promise<SafeBalances> {\n    const response = await this.communicator.send<Methods.getSafeBalances, { currency: string }, SafeBalances>(\n      Methods.getSafeBalances,\n      {\n        currency,\n      },\n    );\n\n    return response.data;\n  }\n\n  private async check1271Signature(messageHash: string, signature = '0x'): Promise<boolean> {\n    const safeInfo = await this.getInfo();\n\n    const encodedIsValidSignatureCall = EIP_1271_INTERFACE.encodeFunctionData('isValidSignature', [\n      messageHash,\n      signature,\n    ]);\n\n    const payload = {\n      call: RPC_CALLS.eth_call,\n      params: [\n        {\n          to: safeInfo.safeAddress,\n          data: encodedIsValidSignatureCall,\n        },\n        'latest',\n      ],\n    };\n    try {\n      const response = await this.communicator.send<Methods.rpcCall, RPCPayload<[TransactionConfig, string]>, string>(\n        Methods.rpcCall,\n        payload,\n      );\n\n      return response.data.slice(0, 10).toLowerCase() === MAGIC_VALUE;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  private async check1271SignatureBytes(messageHash: string, signature = '0x'): Promise<boolean> {\n    const safeInfo = await this.getInfo();\n    const msgBytes = ethers.utils.arrayify(messageHash);\n\n    const encodedIsValidSignatureCall = EIP_1271_BYTES_INTERFACE.encodeFunctionData('isValidSignature', [\n      msgBytes,\n      signature,\n    ]);\n\n    const payload = {\n      call: RPC_CALLS.eth_call,\n      params: [\n        {\n          to: safeInfo.safeAddress,\n          data: encodedIsValidSignatureCall,\n        },\n        'latest',\n      ],\n    };\n\n    try {\n      const response = await this.communicator.send<Methods.rpcCall, RPCPayload<[TransactionConfig, string]>, string>(\n        Methods.rpcCall,\n        payload,\n      );\n\n      return response.data.slice(0, 10).toLowerCase() === MAGIC_VALUE_BYTES;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  calculateMessageHash(message: string): string {\n    return ethers.utils.hashMessage(message);\n  }\n\n  calculateTypedMessageHash(typedMessage: EIP712TypedData): string {\n    return ethers.utils._TypedDataEncoder.hash(typedMessage.domain, typedMessage.types, typedMessage.message);\n  }\n\n  async isMessageSigned(message: string | EIP712TypedData, signature = '0x'): Promise<boolean> {\n    let check: (() => Promise<boolean>) | undefined;\n    if (typeof message === 'string') {\n      check = async (): Promise<boolean> => {\n        const messageHash = this.calculateMessageHash(message);\n        const messageHashSigned = await this.isMessageHashSigned(messageHash, signature);\n        return messageHashSigned;\n      };\n    }\n\n    if (isObjectEIP712TypedData(message)) {\n      check = async (): Promise<boolean> => {\n        const messageHash = this.calculateTypedMessageHash(message);\n        const messageHashSigned = await this.isMessageHashSigned(messageHash, signature);\n        return messageHashSigned;\n      };\n    }\n    if (check) {\n      const isValid = await check();\n\n      return isValid;\n    }\n\n    throw new Error('Invalid message type');\n  }\n\n  async isMessageHashSigned(messageHash: string, signature = '0x'): Promise<boolean> {\n    const checks = [this.check1271Signature.bind(this), this.check1271SignatureBytes.bind(this)];\n\n    for (const check of checks) {\n      const isValid = await check(messageHash, signature);\n      if (isValid) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  async getEnvironmentInfo(): Promise<EnvironmentInfo> {\n    const response = await this.communicator.send<Methods.getEnvironmentInfo, undefined, EnvironmentInfo>(\n      Methods.getEnvironmentInfo,\n      undefined,\n    );\n\n    return response.data;\n  }\n\n  @requirePermission()\n  async requestAddressBook(): Promise<AddressBookItem[]> {\n    const response = await this.communicator.send<Methods.requestAddressBook, undefined, AddressBookItem[]>(\n      Methods.requestAddressBook,\n      undefined,\n    );\n\n    return response.data;\n  }\n}\n\nexport { Safe };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}